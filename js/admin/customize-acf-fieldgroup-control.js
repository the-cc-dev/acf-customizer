!function a(r,c,f){function s(e,t){if(!c[e]){if(!r[e]){var n="function"==typeof require&&require;if(!t&&n)return n(e,!0);if(u)return u(e,!0);var i=new Error("Cannot find module '"+e+"'");throw i.code="MODULE_NOT_FOUND",i}var o=c[e]={exports:{}};r[e][0].call(o.exports,function(t){return s(r[e][1][t]||t)},o,o.exports,a,r,c,f)}return c[e].exports}for(var u="function"==typeof require&&require,t=0;t<f.length;t++)s(f[t]);return s}({1:[function(t,e,n){"use strict";var i,o,a,r,c,f;i=wp.customize,o=jQuery,a=acf_fieldgroup_control,f=[],i.AcfFieldGroupControl=i.Control.extend({preview_context:{type:null,id:null},initialize:function(t,e){var n;n=e||{},i.Control.prototype.initialize.call(this,t,n)},set_preview_context:function(t){return this.preview_context=t,this},ready:function(){var n=this;this.setting(),0<=["post","term","user"].indexOf(n.params.storage_type)&&i.bind("acf-customize-context-changed",function(t){t.type===n.params.storage_type?n.set_preview_context(t).load_form():n.unload_form()}),this.$wrapper=n.container.find(".acf-fields").first(),acf.do_action("append",n.container),n.load_form(),n.container.on("change",".acf-field",function(t){var e=n.container.find(".acf-field :input[name]");acf.validation.errors=[],e.each(function(){this.checkValidity()}),acf.validation.busy=!1,o((r=n).container).data("acf",null),acf.validation.fetch({form:n.container,lock:!1,success:function(t){},complete:function(t){acf.unlockForm(t),setTimeout(function(){n.setting.preview()},100)}})}),i.Control.prototype.ready.apply(n,arguments)},load_form:function(){var t,e=this;(function(t,e){var n={idx:f.length,request:t,done:e,finished:!1,scope:null,arguments:null};f.push(n),t.done(function(){var t;for(n.finished=!0,n.self=this,n.arguments=arguments;f.length&&f[0].finished;)(t=f.shift()).done.apply(t.self,t.arguments)})})(t=wp.ajax.send("load_customizer_field_groups_"+e.id,{data:{wp_customize:"on",section_id:e.id,acf_customize_context:JSON.stringify(e.preview_context),_nonce:a.load_field_group_nonce}}),function(t){e.$wrapper.html(t.html),e.init_fields()}),t.fail(function(t){console.log(" - load field group failure")}),t.always(function(){t=null})},unload_form:function(){this.$wrapper.html("")},init_fields:function(){var t=this;t.$fields=t.container.find(".acf-fields > .acf-field"),setTimeout(function(){acf.doAction("ready",t.$wrapper),acf.doAction("prepare")},1)},updateValues:function(){var t,e=this.container.find(".acf-field :input");e.each(function(){var t=o(this).attr("name");t&&(o(this).data("prev-name",t),o(this).attr("name",t.replace(/\[([0-9]+)\]/g,"[_$1]")))}),t=e.serializeJSON({useIntKeysAsArrayIndex:!1}),e.each(function(){o(this).attr("name",o(this).data("prev-name")),o(this).data("prev-name",null)}),this.setting._value.___acf_customizer_dirty=!0,this.setting.set(function n(i){return o.isPlainObject(i)&&(Object.keys(i).join("").match(/^([0-9_]+)$/)&&(i=Object.values(i)),o.each(i,function(t,e){i[t]=n(e)})),i}(t[this.id]))},focusField:function(t){for(var e,n=this.$wrapper,i=[];t.length;)if(e=t.pop(),(n=_.isNumber(e)?n.is('[data-type="flexible_content"]')?n.find("> .acf-input > .acf-flexible-content > .values").children(":not(.acf-clone)").eq(e):!!n.is('[data-type="repeater"]')&&n.find("> .acf-input > .acf-repeater > .acf-table > tbody").children(":not(.acf-clone)").eq(e):n.find('[data-key="'+e+'"]'))&&n.is("[data-id]")&&i.push(n),!n.length)return!1;return this.focus(),setTimeout(function(){i.length&&function(t){t.forEach(function(t){var e=acf.getField(t.closest(".acf-field"));t.siblings().not(t).each(function(){"repeater"===e.type?e.collapse(o(this)):"flexible_content"===e.type&&e.closeLayout(o(this))}),"repeater"===e.type?e.expand(t):"flexible_content"===e.type&&e.openLayout(t)})}(i),_.isNumber(e)?n.attr("tabindex",1).focus():n.find("input").focus()},500),!0}}),acf.add_action("validation_success",function(t){r.updateValues()}),acf.add_action("validation_failure",function(t){r.container.find("> .acf-error-message").remove()}),acf.add_action("invalid",function(t){acf.validation.busy=!0}),i.bind("ready",function(){i.previewer.bind("acf-customize-context",function(t){var e;e=c,JSON.stringify(t)!=JSON.stringify(e)&&i.trigger("acf-customize-context-changed",t),c=t}),i.previewer.bind("focus-control-for-setting",function(t){}),i.previewer.bind("acf-focus",function(e){var n=e.pop();console.log(n);try{i.control.each(function(t){if(t.constructor===i.AcfFieldGroupControl&&n===t.id)throw t.focusField(e),"break loop"})}catch(t){}})}),i.bind("save-request-params",function(t){_.extend(t,{acf_customize_context:JSON.stringify(c)})}),i.controlConstructor.acf_customizer=i.AcfFieldGroupControl,i.bind("changeset-error",function(){})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
